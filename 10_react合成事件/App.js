import React from 'react'

export default function App() {
  /* 
    React 并不是将 click 事件绑定到 div 的真实 DOM 上，而是在 document 处监听了所有的事件，
    当事件发生并且冒泡到 document 处的时候， React 将事件内容封装并交由真正的处理函数运行。这样的方式不仅仅
    减少了内存的消耗，还能在组件挂载销毁时统一订阅和移除事件

    冒泡到 document 上的事件也不是原生的浏览器事件，而是由 react 自己实现的合成事件。
    
    jsx 上写的事件并没有绑定在对应的真实 DOM 上，而是通过事件代理方式（事件冒泡），将所有的事件都统一绑定在了 document 上。
    这样的方式不仅减少了内存消耗，还能在组件挂载销毁时统一订阅和移除事件

    实现合成事件的目的：
       1 合成事件首先抹平了浏览器之间的兼容问题，另外这是一个跨浏览器原生事件包装器，赋予了跨浏览器开发的能力
       2 对于原生浏览器事件来说，浏览器会给监听器创建一个事件对象，如果有很多的事件监听，那么就需要分配很多的事件对象，
         造成高额的内存分配问题。但是对于合成事件来说，有个事件池专门来管理它们的创建和销毁，当事件需要被使用是，就会
         从池子中复用对象，事件回调结束后，就会销毁事件对象上的属性，从而便于下次复用事件对象
  */

  const reactEvent = () => {
    console.log('React 的事件机制')
  }

  return (
    <>
      <div onClick={reactEvent}>React 的事件机制</div>
    </>
  )
}
